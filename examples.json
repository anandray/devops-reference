{
  "$schema": "https://raw.githubusercontent.com/nanlabs/awesome-nan/main/examples.schema.json",
  "list": [
    {
      "name": "Complete AWS Glue ETL",
      "description": "A complete example of an AWS Glue application that uses the [Serverless Framework](https://www.serverless.com/) to deploy the infrastructure and DevContainers and/or Docker Compose to run the application locally with AWS Glue Libs, Spark, Jupyter Notebook, AWS CLI, among other tools. It provides jobs using Python Shell and PySpark.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-glue-full-boilerplate/",
      "tags": ["Applications"],
      "labels": [
        "Python",
        "AWS",
        "Glue",
        "ETL",
        "Serverless",
        "DevContainers",
        "Docker Compose"
      ]
    },
    {
      "name": "AWS CloudWatch Evidently",
      "description": "A complete analysis of the service and a Proof of Concept on how to integrate it with a Node.js application.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/aws-cloudwatch-evidently/",
      "tags": ["Examples > DevOps > A/B Testing"],
      "labels": [
        "Node.js",
        "AWS",
        "CloudWatch",
        "CloudWatch Evidently",
        "A/B Testing",
        "Feature Flags"
      ]
    },
    {
      "name": "Feature flags post",
      "description": "How to progressively expose your features with feature flags by IAN BUCHANNAN.",
      "url": "https://www.atlassian.com/continuous-delivery/principles/feature-flags",
      "tags": ["Examples > DevOps > A/B Testing"],
      "labels": ["Feature Flags"]
    },
    {
      "name": "When to use shell",
      "description": "A guide from Google on when to use shell scripts.",
      "url": "https://google.github.io/styleguide/shellguide.html#when-to-use-shell",
      "tags": ["Examples > DevOps > Shell Scripting and CLI Tools"],
      "labels": ["Shell Scripting", "Utilities"]
    },
    {
      "name": "Easy Options",
      "description": "Easy options for shell scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/easy-options/",
      "tags": ["Examples > DevOps > Shell Scripting and CLI Tools"],
      "labels": ["Shell Scripting", "Utilities", "Easy Options"]
    },
    {
      "name": "Bash as a Wrapper Utility",
      "description": "Bash as a wrapper utility for other languages and tools.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/bash-as-a-wrapper-utility-basic/",
      "tags": ["Examples > DevOps > Shell Scripting and CLI Tools"],
      "labels": ["Shell Scripting", "Utilities"]
    },
    {
      "name": "Bash as a Wrapper Utility with Easy Options",
      "description": "Bash as a wrapper utility for other languages and tools using Easy Options.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/bash-as-a-wrapper-utility-with-easy-options/",
      "tags": ["Examples > DevOps > Shell Scripting and CLI Tools"],
      "labels": ["Shell Scripting", "Utilities", "Easy Options"]
    },
    {
      "name": "Actionlint Playground",
      "description": "Static checker for GitHub Actions workflow files.",
      "url": "https://rhysd.github.io/actionlint/",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": ["GitHub Actions", "Actionlint"]
    },
    {
      "name": "Markdown Lint",
      "description": "This workflow validates the Markdown files in the repository using the [markdownlint action](https://github.com/marketplace/actions/markdown-lint).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/.github/workflows/markdownlint.yml",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": ["GitHub Actions", "Markdown Lint"]
    },
    {
      "name": "Shell Check",
      "description": "This workflow validates the shell scripts in the repository using the [shellcheck action](https://github.com/ludeeus/action-shellcheck).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/.github/workflows/shellcheck.yml",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": ["GitHub Actions", "Shell Check"]
    },
    {
      "name": "Terraform Check",
      "description": "This workflow validates the Terraform files in the repository using the [terraform action](https://github.com/dflook/terraform-fmt-check).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/.github/workflows/tf-check.yml",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": ["GitHub Actions", "Terraform"]
    },
    {
      "name": "Todo to Issue",
      "description": "This workflow scans new commits on the main branch looking for `TODO`s in the code and creates new GitHub issues.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/.github/workflows/todo.yml",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": ["GitHub Actions", "Todo"]
    },
    {
      "name": "Automate Pull Requests Reviews using Danger",
      "description": "This workflow automates the initial review of Pull Requests using [Danger.js](https://danger.systems/js/). This provides another logical step in your build, through this Danger can help lint your rote tasks in daily code review. You can use Danger to codify your teams norms. Leaving humans to think about harder problems.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/.github/workflows/pr-review.yml",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": ["GitHub Actions", "Danger.js"]
    },
    {
      "name": "Automation Seed example",
      "description": "Different workflows to validate the code and deploy an automation report page.",
      "url": "https://github.com/nanlabs/automation-seed/tree/main/.github/workflows",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": ["GitHub Actions", "Automation"]
    },
    {
      "name": "React Boilerplate",
      "description": "Different workflows to validate the code and deploy a React application.",
      "url": "https://github.com/nanlabs/react-boilerplate/tree/main/.github/workflows",
      "tags": [
        "Examples > DevOps > Continuous Integration, Delivery and Deployment"
      ],
      "labels": ["GitHub Actions", "React"]
    },
    {
      "name": "AWS Glue using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml for AWS Glue development with AWS Glue Libs, Spark, Jupyter Notebook, AWS CLI among other tools.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-glue/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "AWS Glue",
        "Spark",
        "Jupyter Notebook",
        "AWS CLI"
      ]
    },
    {
      "name": "Localstack using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run Localstack locally with all the necessary services. This example also includes a script to create the necessary resources in Localstack. The provided examples are for DynamoDB, S3, SQS and Kinesis.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-localstack/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "Localstack",
        "DynamoDB",
        "S3",
        "SQS",
        "Kinesis"
      ]
    },
    {
      "name": "MongoDB + Mongo Express using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run MongoDB and Mongo Express locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-mongodb/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": ["Docker", "Docker Compose", "MongoDB", "Mongo Express"]
    },
    {
      "name": "Microsoft SQL Server using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run Microsoft SQL Server locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-mssql/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": ["Docker", "Docker Compose", "Microsoft SQL Server"]
    },
    {
      "name": "AWS Neptune using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run AWS Neptune locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-neptune/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": ["Docker", "Docker Compose", "AWS Neptune"]
    },
    {
      "name": "PostgreSQL using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run PostgreSQL locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-postgres/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": ["Docker", "Docker Compose", "PostgreSQL"]
    },
    {
      "name": "Python Buildpack",
      "description": "Buildpack example for Python applications.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/buildpacks-python",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": ["Buildpack", "Python"]
    },
    {
      "name": "Airflow and Spark environment using Docker and Docker Compose",
      "description": "Dockerfile and compose.yml to run Airflow locally with initialization scripts.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-airflow/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": ["Docker", "Docker Compose", "Airflow", "Spark"]
    },
    {
      "name": "AWS Glue",
      "description": "DevContainer for AWS Glue development. Uses `docker-compose` to run VSCode attached to a container with all the necessary tools to develop AWS Glue jobs such us AWS Glue Libs, Spark, Jupyter Notebook, AWS CLI among other tools.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/devcontainers-glue/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > DevContainers and Codespaces"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "DevContainer",
        "VSCode DevContainer",
        "GitHub Codespaces",
        "AWS Glue",
        "Spark",
        "Jupyter Notebook",
        "AWS CLI"
      ]
    },
    {
      "name": "Node.js",
      "description": "DevContainer for Node.js development. Uses `docker-compose` to run VSCode attached to a container with all the necessary tools to develop Node.js applications.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/devcontainers-nodejs/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > DevContainers and Codespaces"
      ],
      "labels": [
        "Docker",
        "Docker Compose",
        "DevContainer",
        "VSCode DevContainer",
        "GitHub Codespaces",
        "Node.js"
      ]
    },
    {
      "name": "Ingress",
      "description": "Ingress example using NGINX Ingress Controller. You can run this example locally using [Minikube](https://minikube.sigs.k8s.io/docs/start/).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/kubernetes-ingress-example/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Kubernetes"
      ],
      "labels": ["Kubernetes", "Ingress", "NGINX Ingress Controller"]
    },
    {
      "name": "AWS Amplify + NextJS 13",
      "description": "AWS Amplify example to deploy a NextJS v13 application to the Cloud.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/amplify-nextjs-deployment/",
      "tags": ["Examples > DevOps > Infrastructure as Code > AWS Amplify"],
      "labels": ["AWS Amplify", "NextJS", "NextJS 13"]
    },
    {
      "name": "AWS AppSync + TypeScript",
      "description": "Serverless Framework example to deploy an AWS AppSync API using TypeScript. It also has a local development environment using [Serverless Offline](https://www.serverless.com/plugins/serverless-offline).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-appsync-node-typescript/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "AWS AppSync", "TypeScript"]
    },
    {
      "name": "AWS AppSync + Python",
      "description": "Serverless Framework example to deploy an AWS AppSync API using Python. It also has a local development environment using [Serverless Offline](https://www.serverless.com/plugins/serverless-offline).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-appsync-python/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "AWS AppSync", "Python"]
    },
    {
      "name": "AWS Glue with Python Shell and PySpark Jobs",
      "description": "Serverless Framework example to deploy an AWS Glue job using Python Shell and PySpark.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-glue-deployment/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "AWS Glue", "Python Shell", "PySpark"]
    },
    {
      "name": "Neo4j in EC2",
      "description": "Serverless Framework example to deploy a Neo4j instance in EC2.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-neo4j-ec2/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "Neo4j", "EC2"]
    },
    {
      "name": "Serverless S3 Local",
      "description": "Serverless Framework example to run a lambda function locally using [Serverless S3 Local](https://www.serverless.com/plugins/serverless-s3-local).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-s3-local/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "Serverless S3 Local"]
    },
    {
      "name": "Serverless SQS offline + TypeScript + ElasticMQ Example",
      "description": "Serverless Framework example to run lambda functions locally using [Serverless Offline SQS](https://www.serverless.com/plugins/serverless-offline-sqs) with ElasticMQ. It provides a full local development environment using [Serverless Offline](https://www.serverless.com/plugins/serverless-offline).",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-sqs-node-typescript-offline-with-elasticmq/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Serverless Framework",
        "SQS",
        "Serverless Offline",
        "Serverless Offline SQS",
        "ElasticMQ"
      ]
    },
    {
      "name": "Start and Stop EC2 Instances with AWS Lambda",
      "description": "Serverless Framework example to start and stop EC2 instances using AWS Lambda.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-start-stop-ec2-instance/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "EC2", "AWS Lambda"]
    },
    {
      "name": "DocumentDB Cluster",
      "description": "Serverless Framework example to deploy a DocumentDB cluster with all the necessary resources.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-documentdb/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "DocumentDB"]
    },
    {
      "name": "RDS Postgres Instance",
      "description": "Serverless Framework example to deploy a RDS Postgres cluster with all the necessary resources.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-rds-postgres/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "RDS Postgres"]
    },
    {
      "name": "Serverless Middy",
      "description": "Serverless Framework example to deploy a lambda function using [Middy](https://middy.js.org/), the stylish Node.js middleware engine for AWS Lambda.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-node-typescript-middy/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "Middy"]
    },
    {
      "name": "Serverless Middy with Custom Middleware",
      "description": "Serverless Framework example to deploy a lambda function using [Middy](https://middy.js.org/), the stylish Node.js middleware engine for AWS Lambda.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-node-typescript-middy-custom-middleware/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "Middy", "Custom Middleware"]
    },
    {
      "name": "Serverless Nest Application with TypeScript",
      "description": "Serverless Framework example to deploy a NestJS application using TypeScript.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-node-typescript-nest/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": ["Serverless Framework", "NestJS", "TypeScript"]
    },
    {
      "name": "Terraform AWS Minecraft Server",
      "description": "Terraform example to deploy a Minecraft server in AWS EC2 instance using Docker.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/terraform-aws-minecraft-server/",
      "tags": [
        "Examples > DevOps > Infrastructure as Code > Terraform"
      ],
      "labels": ["Terraform", "AWS", "Minecraft", "Docker", "EC2"]
    },
    {
      "name": "AWS Cognito Local Example",
      "description": "AWS Cognito local enviroment with Docker and Serverless offline",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/serverless-cognito-local/",
      "tags": [
        "Examples > DevOps > Serverless Framework > Containers"
      ],
      "labels": ["Serverless Framework", "Serverless Offline", "AWS", "Cognito", "Docker"]
    },
    {
      "name": "AWS Cognito local using Docker Compose",
      "description": "compose.yml to run Cognito locally.",
      "url": "https://github.com/nanlabs/devops-reference/tree/main/examples/compose-cognito/",
      "tags": [
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": ["Docker", "Docker Compose", "Cognito", "AWS"]
    }
  ]
}
