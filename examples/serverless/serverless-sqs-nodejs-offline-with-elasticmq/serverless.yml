service: ${env:SERVICE_NAME, 'sqs-nodejs'}

frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-offline-sqs
  - serverless-offline

useDotenv: true

package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - elasticMQ

custom:
  sqs:
    queueName: ${self:service}-${self:provider.stage}-myFirstQueue

  serverless-offline:
    httpPort: 3000
    port: 3000
    useChildProcesses: true
    noPrependStageInUrl: true

  serverless-offline-sqs:
    autoCreate: true
    apiVersion: "2012-11-05"
    endpoint: ${env:SQS_CLIENT_URL, 'http://localstack:9324'} # elasticMQ
    region: ${opt:region, env:AWS_REGION, 'us-east-1'}
    skipCacheInvalidation: false

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, env:STAGE, 'local'}
  region: ${opt:region, env:AWS_REGION, 'us-east-1'}
  profile: ${opt:aws-profile, env:AWS_PROFILE, ''}
  environment:
    STAGE: ${self:provider.stage}
    SQS_CLIENT_URL: ${env:SQS_CLIENT_URL, ''}
    SQS_QUEUE_NAME: ${self:custom.sqs.queueName}
  deploymentBucket:
    blockPublicAccess: true
    versioning: true
    serverSideEncryption: AES256
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
        - SQS:SendMessage
        - SQS:DeleteMessage
        - SQS:ReceiveMessage
        - SQS:GetQueueUrl
        - SQS:ListQueues
      Resource: "*"

functions:
  listQueues:
    handler: src/handlers/listQueues.handler
    description: This lambda will list all the queues for an account
    events:
      - http:
          path: /list
          method: GET

  sendToQueue:
    handler: src/handlers/sendToQueue.handler
    description: This lambda will enqueue a message
    events:
      - http:
          path: /invoke
          method: POST

  readFromQueue:
    handler: src/handlers/readFromQueue.handler
    description: Log messages on sqs queue and delete them
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - myFirstQueue
              - Arn

resources:
  Resources:
    myFirstQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs.queueName}
